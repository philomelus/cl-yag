h
backtrace
down
source
(defmacro sprites-load-bitmap (field desc x y w h)
  `(setf (,field *SPRITES*) (sprite-grab ,x ,y ,w ,h))
  (must-init (,field *SPRITES) desc))
(defmacro test (field desc x y w h)
`(setf (,field *SPRITES*) (sprite-grab ,x ,y ,w ,h))
(must-init (,field *SPRITES*) desc)
0
3
abort
top
(describe #'macroexpand)
(describe #'macroexpand-1)
(load "macros")
5
(load "macros")
5
(load "macros")
5
(load "macros")
(macroexpand-1 '(sprites-load-bitmap test-path "test" 1 2 3 4))
(load "macros")
0
(load "macros")
(macroexpand-1 '(sprites-load-bitmap test-path "test" 1 2 3 4))
(load "macros")
(describe 'sprites-load-bitmap)
(macroexpand '(sprites-load-bitmap test-path "some desc" 1 2 3 4))
(load "macros")
0
(load "macros")
(macroexpand '(sprites-load-bitmap test-path "some desc" 1 2 3 4))
(macroexpand '(sprites-load-bitmap (aref test-path 0) "some desc" 1 2 3 4))
(load "macros")
(macroexpand '(sprites-load-bitmap (aref test-path 0) "some desc" 1 2 3 4))
(defun test ()
(progn
(format t "test 1"))
(progn
(format t "test 2"))
)
(test)
(load "macros")
(macroexpand '(sprites-load-bitmap test-path "some desc" 1 2 3 4))
(macroexpand '(sprites-load-bitmap sprites-ship "ship" 0 0 +SHIP-W+ +SHIP-H+))
(load "macros")
(macroexpand '(sprites-load-bitmap-2 sprites-ship 1 "ship" 0 0 +SHIP-W+ +SHIP-H+))
(asdf:load-system :blastok :force t)
(blastok:main)
backtrace
down
blastok::*aliens*
up
abort
(asdf:load-system :blastok :force t)
(blastok:main)
start
0
(step (blastok:main))
h
list-breakpoints
breakpoint :start 'aliens-update
0
h breakpoint
(setf SB-DEBUG:*FLUSH-DEBUG-ERRORS* t)
breakpoint :break (aliens-update)
breakpoint :break aliens-update
breakpoint :function #'aliens-update
breakpoint :function 'aliens-update
breakpoint :function blastok::aliens-update
ll
ll #'blastok::aliens-update
breakpoint #'blastok::aliens-update 12
breakpoint :function #'blastok::aliens-update
breakpoint 2 :function #'blastok::aliens-update 
c
continue
up
h
next
s
n
start
ll
source
s
n
start
0
(decvar *test* (make-array 12 :initial-element 0))
3
(defvar *test* (make-array 12 :initial-element 0))
*test*
(dotimes (x *test*) (setf x 1))
0
(dolist (x *test*) (setf x 1))
0
(describe elt)
3
(describe 'elt)
(elt *test* 0)
(setf (elt *test* 0) 1)
(elt *test* 0)
(setf (aref *test* 1) 12)
(aref *test* 1)
(elt *test* 1)
(defvar *test* (make-array 12 :initial-element 0))
(length *test*)
(dotimes (i (length *test*)) (print i))
(symbol-macrolet ((alien (aref *ALIENS* 0)))
(alien-y 'foo))
4
(defstruct FOO (shot (make-array 4) :conc-name shots))
0
(defmacro (foo a b)
`(aref (fubar-foo ,a) ,b)
)
(asdf:load-system :blastok :force t)
8
(ql:quickload :blastok)
(mapc 'require '(sb-bsd-sockets sb-posix sb-introspect sb-cltl2 asdf))
(save-lisp-and-die "sbcl.core-for-slime")
(round (/ 155 2))
(format t "~b" nil)
(format t "~b" t)
(format t "~b" 0)
(if (and nil nil) "T" "F")
(logxor nil nil)
0
(dotimes (i 10)
(if (= i 7)
(return)))
random
3
1
(simple-array 10)
4
*features*
(proclaim (optimize (debug 0) (safety 0) (space 0) (speed 0)))
4
(proclaim (optimize (debug 0) (safety 0) (space 0) (speed 0)))
2
(describe 'optimize)
(proclaim (optimize (debug 0) (safety 0) (space 0) (speed 0)))
4
(declare (optimize (safety 0)))
0
(proclaim (optimize (safety 0)))
2
(asdf:load-system :blastok)
abort
(asdf:load-system :blastok :force t)
7
(asdf:load-system :blastok :force t)
(asdf:load-system :blastok)
(asdf:load-system :blastok :force t)
(ql:apropos)
1
(ql:quickload :clingon)
(ql:quickload :event-glue)
(defclass foo () ((a) (b)))
(describe '
)
1
(describe 
)
2
(describe 'foo)
(defclass goo () (a :accessor aa))
0
(defclass goo () (a :accessor "aa"))
0
(defclass foo () ((a :accessor)))
0
(defclass foo () ((a :initform)))
0
(defclass foo () ((a :accessor app)))
(describe 'app)
(defclass foo () ((a :accessor foo-a)))
(describe 'app)
(describe 'foo-a)
cls
(asdf:make :simple-asteroids)
10
(ql:quickload "qbook")
14
(ql:quickload "cffi-object")
(asdf:make "cl-liballegro")
(asdf:make "cffi-object" "cl-liballegro")
0
(asdf:make "cl-liballegro")
(asdf:make "cffi-object")
(cobj:define-cobject-class (bitmap (:struct al::bitmap)))
(defvar *temp*)
(setf *temp* (make-instance :bitmap))
(asdf:make "cl-liballegro")
(asdf:make "cffi-object")
(cobj:define-cobject-class #:cl-liballegro)
3
(cobj:define-cobject-class (bitmap (:struct al::bitmap)))
(make-bitmap)
(defvar *temp*)
(setf *temp* (make-bitmap))
(bitmap-xofs *temp*)
(setf (bitmap-xofs *temp*) 12)
(bitmap-xofs *temp*)
(cffi:foreign-type-size '(:struct bitmap))
0
(describe 'bitmap)
*temp*
(cobj:define-cobject-class (audio-depeth (:enum al::audio-depth)))
0
(asdf:make "cl-liballegro")
(asdf:make "cffi-object")
(cobj:define-cobject-class #:cl-liballegro)
backtrace
abort
(cobj:define-cobject-class al::event)
0
(cobj:define-cobject-class (event (:stuct al::event)))
0
(cobj:define-cobject-class (event (:union al::event)))
0
(cobj:define-cobject-class (event (:struct al::event)))
0
(cobj:define-cobject-class (event (:struct al::keyboard-event)))
(cobj:define-cobject-class (any-event (:struct al::any-event)))
(any-event-type (make-any-event))
0
(describe 'event-keycode)
(defvar *kbd*)
(setf *kbd* (make-any-event))
0
(setf *kbd* (make-any-event :type :any-event))
0
(setf *kbd* (make-any-event :type (foreign-enum-value 'al::event-types :key-char)))
4
(setf *kbd* (make-any-event :type (cffi:foreign-enum-value 'al::event-types :key-char)))
*kbd*
(event-keycode *key*)
3
(event-keycode *kbd*)
0
cls
3
(defvar *s* 0)
(dpb *s* (dpb 1 *KEY-STATE-DOWN* *s*)
*s*
(dpb 1 *KEY-STATE-DOWN* *s* 1 *KEY-STATE-SEEN* *s*)
3
*KEY-STATE-SEEN*
3
(asdf:make "cl-liballegro")
backtrace
abort
(describe 'asdf:load-asd)
(ql:quickload "clg")
1
0
(ql:quickload :cffi-objects)
1
(ql:quickload :cffi-object)
(ql:quickload :clg)
abort
(ql:quickload :clg)
abort
(ql:quickload :clg)
abort
(ql:quickload :clg)
top
(ql:quickload :cl-liballegro)
(ql:quickload :cffi-object)
(ql:quickload :event-glue)
(ql:quickload :clg)
top
(ql:quickload :clg)
(asdf:make :clg :force nil)
(ql:quickload :clg)
0
(ql:quickload :clg)
(clg:main)
h
:h
?
backtrace
threads
btthread "main thread"
btthread 0x7f27f0650080
btthread
btthread 1
btthread 0
btthread 0x1200be0090
btthread 0x7f27f0706b80
btthread
btthread 0x123454
btthread 0x1200be0090
backtrace
